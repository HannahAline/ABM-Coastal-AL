#FishjettyBin
datum$FishjettyBin = as.factor(datum$FishjettyBin)
#Fishboat
datum$Fishboat = as.factor(datum$Fishboat)
#FishboatBin
datum$FishboatBin = as.factor(datum$FishboatBin)
#Boatmotor
datum$Boatmotor = as.factor(datum$Boatmotor)
#BoatmotorBin
datum$BoatmotorBin = as.factor(datum$BoatmotorBin)
#Boatsail
datum$Boatsail = as.factor(datum$Boatsail)
#BoatsailBin
datum$BoatsailBin = as.factor(datum$BoatsailBin)
#Angler
datum$Angler = as.factor(datum$Angler)
#Pamphlet
datum$Pamphlet = as.factor(datum$Pamphlet)
#Sign
datum$Sign = as.factor(datum$Sign)
#Magnet
datum$Magnet = as.factor(datum$Magnet)
#Sticker
datum$Sticker = as.factor(datum$Sticker)
#Bycatch
datum$Bycatch = as.factor(datum$Bycatch)
#Lures
datum$Lures = as.factor(datum$Lures)
#Hooks
datum$Hooks = as.factor(datum$Hooks)
#Lights
datum$Lights = as.factor(datum$Lights)
#Phone
datum$Phone = as.factor(datum$Phone)
#PolicyBin
datum$PolicyBin = as.factor(datum$PolicyBin)
#WildlifeBin
datum$WildlifeBin = as.factor(datum$WildlifeBin)
# Calculate demographic proportions
race_proportions <- your_data_frame %>%
group_by(race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(datum)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(race_proportions)
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
summarize(count = n()) %>%
2
education_proportions <- datum %>%
O
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(education_proportions)
# Define the number of agents and simulation steps
num_agents <- 100
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(your_data_frame$race, num_agents, replace = TRUE, prob = race_proportions$proportion),
gender = sample(your_data_frame$gender, num_agents, replace = TRUE, prob = gender_proportions$proportion),
education = sample(your_data_frame$education, num_agents, replace = TRUE, prob = education_proportions$proportion),
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion),
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion),
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(education_proportions)
#Remove NA so the proportions make sense
na.omit(datum)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
#Remove NA so the proportions make sense
na.omit(datum)
# Load required packages
library(dplyr)
# Load your demographic data from a CSV file (replace 'your_data.csv' with the actual file name)
datum <- read.csv(file.choose())
#Remove NA so the proportions make sense
na.omit(datum)
#Remove NA so the proportions make sense
datum <- na.omit(datum)
#Race
datum$Race = as.factor(datum$Race)
#Spanish
datum$Spanish = as.factor(datum$Spanish)
#Gender
datum$Gender = as.factor(datum$Gender)
#GenderBin
datum$GenderBin = as.factor(datum$GenderBin)
#ALResident
datum$ALResident = as.factor(datum$ALResident)
#Education
datum$Education = as.factor(datum$Education)
#EducationBin
datum$EducationBin = as.factor(datum$EducationBin)
#Visitor
datum$Visitor = as.factor(datum$Visitor)
#Beach
datum$Beach = as.factor(datum$Beach)
#BeachBin
datum$BeachBin = as.factor(datum$BeachBin)
#Turtleview
datum$Turtleview = as.factor(datum$Turtleview)
#TurtleviewBin
datum$TurtleviewBin = as.factor(datum$TurtleviewBin)
#Dolphinview
datum$Dolphinview = as.factor(datum$Dolphinview)
#DolphinviewBin
datum$DolphinviewBin = as.factor(datum$DolphinviewBin)
#Wildlifeview
datum$Wildlifeview = as.factor(datum$Wildlifeview)
#WildlifeviewBin
datum$WildlifeviewBin = as.factor(datum$WildlifeviewBin)
#Fishbeach
datum$Fishbeach = as.factor(datum$Fishbeach)
#FishbeachBin
datum$FishbeachBin = as.factor(datum$FishbeachBin)
#Fishjetty
datum$Fishjetty = as.factor(datum$Fishjetty)
#FishjettyBin
datum$FishjettyBin = as.factor(datum$FishjettyBin)
#Fishboat
datum$Fishboat = as.factor(datum$Fishboat)
#FishboatBin
datum$FishboatBin = as.factor(datum$FishboatBin)
#Boatmotor
datum$Boatmotor = as.factor(datum$Boatmotor)
#BoatmotorBin
datum$BoatmotorBin = as.factor(datum$BoatmotorBin)
#Boatsail
datum$Boatsail = as.factor(datum$Boatsail)
#BoatsailBin
datum$BoatsailBin = as.factor(datum$BoatsailBin)
#Angler
datum$Angler = as.factor(datum$Angler)
#Pamphlet
datum$Pamphlet = as.factor(datum$Pamphlet)
#Sign
datum$Sign = as.factor(datum$Sign)
#Magnet
datum$Magnet = as.factor(datum$Magnet)
#Sticker
datum$Sticker = as.factor(datum$Sticker)
#Bycatch
datum$Bycatch = as.factor(datum$Bycatch)
#Lures
datum$Lures = as.factor(datum$Lures)
#Hooks
datum$Hooks = as.factor(datum$Hooks)
#Lights
datum$Lights = as.factor(datum$Lights)
#Phone
datum$Phone = as.factor(datum$Phone)
#PolicyBin
datum$PolicyBin = as.factor(datum$PolicyBin)
#WildlifeBin
datum$WildlifeBin = as.factor(datum$WildlifeBin)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(race_proportions)
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(education_proportions)
View(race_proportions)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(education_proportions)
View(gender_proportions)
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(datum)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(education_proportions)
View(education_proportions)
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(education_proportions)
View(education_proportions)
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(datum)
=0.008547009+0.136752137+0.149572650+0.243589744+0.388888889+0.072649573
#-------------------------------------------------------------------------------
#Output
0.008547009+0.136752137+0.149572650+0.243589744+0.388888889+0.072649573=
# Load required packages
library(dplyr)
# Load your demographic data from a CSV file
datum <- read.csv(file.choose())
#Remove NA so the proportions make sense (lets see if we still want to do this)
datum <- na.omit(datum)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50 #How many times will agents interact with wildlife.
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
race = sample(race_proportions$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race
gender = sample(gender_proportions$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(education_proportions$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
# Load raw data from the CSV file
raw_data <- read.csv(file.choose())
# CSV columns are named "Race", "Gender", and "Education"
race_values <- na.omit(unique(raw_data$Race))
gender_values <- na.omit(unique(raw_data$Gender))
education_values <- na.omit(unique(raw_data$Education))
# Calculate nested proportions for all combinations in raw data
nested_counts <- list() #This counts all the possible proportions
for (gender in gender_values) {
for (race in race_values) {
for (edu in education_values) {
count <- sum(!is.na(raw_data$Gender) & !is.na(raw_data$Race) & !is.na(raw_data$Education) &
raw_data$Gender == gender & raw_data$Race == race & raw_data$Education == edu)
nested_counts[[paste(gender, race, edu)]] <- count
}
}
}
# Function to generate population based on nested proportions and adjust for rounding discrepancies
generate_population <- function(size, counts) {
total_counts <- sum(unlist(counts))
scaling_factor <- size / total_counts
generated_population <- data.frame()
remaining_individuals <- size
for (gender in gender_values) {
for (race in race_values) {
for (edu in education_values) {
# Calculate the number of individuals for each combination and adjust for rounding discrepancies
count <- round(counts[[paste(gender, race, edu)]] * scaling_factor)
individuals <- data.frame(
gender = rep(gender, count),
race = rep(race, count),
education = rep(edu, count)
)
# Update remaining individuals after rounding
remaining_individuals <- remaining_individuals - count
# Combine generated individuals into the population dataframe
generated_population <- rbind(generated_population, individuals)
}
}
}
# Distribute remaining individuals based on rounding differences
if (remaining_individuals > 0) {
extra_individuals <- raw_data[sample(nrow(raw_data), remaining_individuals), ]
generated_population <- rbind(generated_population, extra_individuals)
}
return(generated_population)
}
# Function to calculate proportions in the generated population
calculate_generated_proportions <- function(population) {
return(prop.table(table(population$race, population$gender, population$education)))
}
# Generate population using the nested proportions and adjusted rounding
population_size <- 1000  # Adjust as needed
population <- generate_population(population_size, nested_counts)
# Calculate proportions in the generated population
generated_proportions <- calculate_generated_proportions(population)
# Calculate proportions in the original datasetR
original_proportions <- prop.table(table(raw_data$Race, raw_data$Gender, raw_data$Education))
# Compare proportions between original and generated data
proportions_match <- all.equal(original_proportions, generated_proportions)
# View the comparison result
print(proportions_match)
# Function to simulate interactions with different educational materials and update knowledge score
interact_with_material <- function(population, material_type, knowledge_value) {
population$knowledge_score <- pmin(population$knowledge_score + knowledge_value, 1)  # Limit knowledge score to 1
return(population)
}
# Function to simulate interactions with various educational materials based on set chances
simulate_interactions_with_materials <- function(population, interaction_chances, knowledge_values, interaction_matrix) {
for (i in 1:nrow(population)) {
# Simulate interaction with different materials based on set chances
for (j in 1:length(interaction_chances)) {
if (runif(1) < interaction_chances[j]) {
population[i, ] <- interact_with_material(population[i, ], j, knowledge_values[j])
interaction_matrix[i, j] <- interaction_matrix[i, j] + 1  # Increment interaction count for the material type
}
}
}
return(list(population, interaction_matrix))
}
# Function to simulate forgetting knowledge with random chances
forget_knowledge_random_chance <- function(population, knowledge_loss) {
for (i in 1:nrow(population)) {
# Generate a random forgetting chance for each individual
forgetting_chance <- runif(1, min = 0, max = 1)  # Random chance between 0 and 1 (adjust as needed)
# Simulate a random chance of forgetting for each individual
if (runif(1) < forgetting_chance) {
population$knowledge_score[i] <- pmax(population$knowledge_score[i] - knowledge_loss, 0)  # Limit knowledge score to 0
}
}
return(population)
}
# Function to simulate behavior based on knowledge score
simulate_behavior_based_on_knowledge <- function(population, positive_behavior_threshold) {
for (i in 1:nrow(population)) {
# Simulate behavior based on knowledge score
if (population$knowledge_score[i] > positive_behavior_threshold) {
population$behavior[i] <- "Positive"  # Good behavior
} else {
population$behavior[i] <- "Negative"  # Bad behavior
}
}
return(population)
}
# Function to simulate interactions, forgetting, and behavior over multiple loops
simulate_agent_behavior_over_time <- function(population, num_iterations, interaction_chances, knowledge_values, knowledge_loss, positive_behavior_threshold) {
interaction_matrix <- matrix(0, nrow = nrow(population), ncol = length(interaction_chances))  # Matrix to track interactions
for (loop in 1:num_iterations) {
# Simulate interactions with different educational materials based on set chances
result <- simulate_interactions_with_materials(population, interaction_chances, knowledge_values, interaction_matrix)
population <- result[[1]]
interaction_matrix <- result[[2]]
# Simulate forgetting knowledge with random chances
population <- forget_knowledge_random_chance(population, knowledge_loss)
# Simulate behavior based on knowledge score after interactions and forgetting
population <- simulate_behavior_based_on_knowledge(population, positive_behavior_threshold)
}
return(list(population, interaction_matrix))
}
# Set initial knowledge score for each individual in the population to 0
population$knowledge_score <- rep(0, nrow(population))
# Parameters for educational materials
num_materials <- 4  # Number of educational material types
# The order is pamphlet, sign, magnet, sticker
interaction_chances <- c(0.15, 0.2, 0.05, 0.05)  # Change these values as needed for each material
knowledge_values <- c(0.1, 0.25, 0.05, 0.15)  # Knowledge values corresponding to each material
# Parameters for simulation
num_iterations <- 10  # Change this value as needed
knowledge_loss_on_forget <- 0.1  # Change this value as needed
positive_behavior_threshold <- 0.5  # Threshold for positive behavior, change as needed
# Simulate interactions, forgetting, and behavior over multiple loops for the agents
result <- simulate_agent_behavior_over_time(
population,
num_iterations,
interaction_chances,
knowledge_values,
knowledge_loss_on_forget,
positive_behavior_threshold
)
population <- result[[1]]
interaction_matrix <- result[[2]]
View(result)
View(result)
View(population)
View(population)
summary(population)
View(nested_counts)
# Compare proportions between original and generated data
proportions_match <- all.equal(original_proportions, generated_proportions)
# View the comparison result
print(proportions_match)
