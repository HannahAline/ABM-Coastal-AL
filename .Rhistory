et parameters
# Load required packages
library(dplyr)
# Load required packages
library(dplyr)
# Load your demographic data from a CSV file (replace 'your_data.csv' with the actual file name)
data_frame <- read.csv(file.choose())
# Load required packages
library(dplyr)
# Load your demographic data from a CSV file (replace 'your_data.csv' with the actual file name)
datum <- read.csv(file.choose())
#Race
datum$Race = as.factor(datum$Race)
#Spanish
datum$Spanish = as.factor(datum$Spanish)
#Gender
datum$Gender = as.factor(datum$Gender)
#GenderBin
datum$GenderBin = as.factor(datum$GenderBin)
#ALResident
datum$ALResident = as.factor(datum$ALResident)
#Education
datum$Education = as.factor(datum$Education)
#EducationBin
datum$EducationBin = as.factor(datum$EducationBin)
#Visitor
datum$Visitor = as.factor(datum$Visitor)
#Beach
datum$Beach = as.factor(datum$Beach)
#BeachBin
datum$BeachBin = as.factor(datum$BeachBin)
#Turtleview
datum$Turtleview = as.factor(datum$Turtleview)
#TurtleviewBin
datum$TurtleviewBin = as.factor(datum$TurtleviewBin)
#Dolphinview
datum$Dolphinview = as.factor(datum$Dolphinview)
#DolphinviewBin
datum$DolphinviewBin = as.factor(datum$DolphinviewBin)
#Wildlifeview
datum$Wildlifeview = as.factor(datum$Wildlifeview)
#WildlifeviewBin
datum$WildlifeviewBin = as.factor(datum$WildlifeviewBin)
#Fishbeach
datum$Fishbeach = as.factor(datum$Fishbeach)
#FishbeachBin
datum$FishbeachBin = as.factor(datum$FishbeachBin)
#Fishjetty
datum$Fishjetty = as.factor(datum$Fishjetty)
#FishjettyBin
datum$FishjettyBin = as.factor(datum$FishjettyBin)
#Fishboat
datum$Fishboat = as.factor(datum$Fishboat)
#FishboatBin
datum$FishboatBin = as.factor(datum$FishboatBin)
#Boatmotor
datum$Boatmotor = as.factor(datum$Boatmotor)
#BoatmotorBin
datum$BoatmotorBin = as.factor(datum$BoatmotorBin)
#Boatsail
datum$Boatsail = as.factor(datum$Boatsail)
#BoatsailBin
datum$BoatsailBin = as.factor(datum$BoatsailBin)
#Angler
datum$Angler = as.factor(datum$Angler)
#Pamphlet
datum$Pamphlet = as.factor(datum$Pamphlet)
#Sign
datum$Sign = as.factor(datum$Sign)
#Magnet
datum$Magnet = as.factor(datum$Magnet)
#Sticker
datum$Sticker = as.factor(datum$Sticker)
#Bycatch
datum$Bycatch = as.factor(datum$Bycatch)
#Lures
datum$Lures = as.factor(datum$Lures)
#Hooks
datum$Hooks = as.factor(datum$Hooks)
#Lights
datum$Lights = as.factor(datum$Lights)
#Phone
datum$Phone = as.factor(datum$Phone)
#PolicyBin
datum$PolicyBin = as.factor(datum$PolicyBin)
#WildlifeBin
datum$WildlifeBin = as.factor(datum$WildlifeBin)
# Calculate demographic proportions
race_proportions <- your_data_frame %>%
group_by(race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(datum)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(race_proportions)
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
summarize(count = n()) %>%
2
education_proportions <- datum %>%
O
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(education_proportions)
# Define the number of agents and simulation steps
num_agents <- 100
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(your_data_frame$race, num_agents, replace = TRUE, prob = race_proportions$proportion),
gender = sample(your_data_frame$gender, num_agents, replace = TRUE, prob = gender_proportions$proportion),
education = sample(your_data_frame$education, num_agents, replace = TRUE, prob = education_proportions$proportion),
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion),
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion),
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(education_proportions)
#Remove NA so the proportions make sense
na.omit(datum)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
#Remove NA so the proportions make sense
na.omit(datum)
# Load required packages
library(dplyr)
# Load your demographic data from a CSV file (replace 'your_data.csv' with the actual file name)
datum <- read.csv(file.choose())
#Remove NA so the proportions make sense
na.omit(datum)
#Remove NA so the proportions make sense
datum <- na.omit(datum)
#Race
datum$Race = as.factor(datum$Race)
#Spanish
datum$Spanish = as.factor(datum$Spanish)
#Gender
datum$Gender = as.factor(datum$Gender)
#GenderBin
datum$GenderBin = as.factor(datum$GenderBin)
#ALResident
datum$ALResident = as.factor(datum$ALResident)
#Education
datum$Education = as.factor(datum$Education)
#EducationBin
datum$EducationBin = as.factor(datum$EducationBin)
#Visitor
datum$Visitor = as.factor(datum$Visitor)
#Beach
datum$Beach = as.factor(datum$Beach)
#BeachBin
datum$BeachBin = as.factor(datum$BeachBin)
#Turtleview
datum$Turtleview = as.factor(datum$Turtleview)
#TurtleviewBin
datum$TurtleviewBin = as.factor(datum$TurtleviewBin)
#Dolphinview
datum$Dolphinview = as.factor(datum$Dolphinview)
#DolphinviewBin
datum$DolphinviewBin = as.factor(datum$DolphinviewBin)
#Wildlifeview
datum$Wildlifeview = as.factor(datum$Wildlifeview)
#WildlifeviewBin
datum$WildlifeviewBin = as.factor(datum$WildlifeviewBin)
#Fishbeach
datum$Fishbeach = as.factor(datum$Fishbeach)
#FishbeachBin
datum$FishbeachBin = as.factor(datum$FishbeachBin)
#Fishjetty
datum$Fishjetty = as.factor(datum$Fishjetty)
#FishjettyBin
datum$FishjettyBin = as.factor(datum$FishjettyBin)
#Fishboat
datum$Fishboat = as.factor(datum$Fishboat)
#FishboatBin
datum$FishboatBin = as.factor(datum$FishboatBin)
#Boatmotor
datum$Boatmotor = as.factor(datum$Boatmotor)
#BoatmotorBin
datum$BoatmotorBin = as.factor(datum$BoatmotorBin)
#Boatsail
datum$Boatsail = as.factor(datum$Boatsail)
#BoatsailBin
datum$BoatsailBin = as.factor(datum$BoatsailBin)
#Angler
datum$Angler = as.factor(datum$Angler)
#Pamphlet
datum$Pamphlet = as.factor(datum$Pamphlet)
#Sign
datum$Sign = as.factor(datum$Sign)
#Magnet
datum$Magnet = as.factor(datum$Magnet)
#Sticker
datum$Sticker = as.factor(datum$Sticker)
#Bycatch
datum$Bycatch = as.factor(datum$Bycatch)
#Lures
datum$Lures = as.factor(datum$Lures)
#Hooks
datum$Hooks = as.factor(datum$Hooks)
#Lights
datum$Lights = as.factor(datum$Lights)
#Phone
datum$Phone = as.factor(datum$Phone)
#PolicyBin
datum$PolicyBin = as.factor(datum$PolicyBin)
#WildlifeBin
datum$WildlifeBin = as.factor(datum$WildlifeBin)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(race_proportions)
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(education_proportions)
View(race_proportions)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(education_proportions)
View(gender_proportions)
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
num_steps <- 50
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(datum)
# Calculate demographic proportions
race_proportions <- datum %>%
group_by(Race) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(education_proportions)
View(education_proportions)
gender_proportions <- datum %>%
group_by(Gender) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
education_proportions <- datum %>%
group_by(Education) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Define the number of agents and simulation steps
num_agents <- 100 #This is how large the population is, and can be changed later on
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(education_proportions)
View(education_proportions)
# Create a data frame to represent agents
agents <- data.frame(
agent_id = 1:num_agents,
race = sample(datum$Race, num_agents, replace = TRUE, prob = race_proportions$proportion),#Assign race#
gender = sample(datum$Gender, num_agents, replace = TRUE, prob = gender_proportions$proportion), #Assign gender
education = sample(datum$Education, num_agents, replace = TRUE, prob = education_proportions$proportion), #Assign education
policy_knowledge = rep(0, num_agents),  # Initialize policy knowledge to zero
education_material = sample(c("sign", "pamphlet", "sticker", "magnet"), num_agents, replace = TRUE)
)
View(datum)
=0.008547009+0.136752137+0.149572650+0.243589744+0.388888889+0.072649573
#-------------------------------------------------------------------------------
#Output
0.008547009+0.136752137+0.149572650+0.243589744+0.388888889+0.072649573=
